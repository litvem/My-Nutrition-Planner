{
	"info": {
		"_postman_id": "6e87a540-f1c0-44f1-83e3-30521cca171f",
		"name": "Manual test for Recipies",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15823420"
	},
	"item": [
		{
			"name": "Recipes Controller Test",
			"item": [
				{
					"name": "Sign up  profile 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response =  pm.response.json();\r",
									"var profileId = response.userCreated._id;\r",
									"pm.environment.set(\"profileID_1\", profileId)\r",
									"\r",
									"\r",
									"pm.test(\"Correct status code\",\r",
									"    function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct user response\", function () {\r",
									"    pm.expect(response.userCreated.username).to.eql(\"HarryPotter\");\r",
									"//    pm.expect(jsonData.userCreated.password).to.eql(\"Hogwarts123\"); - it hash now\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"HarryPotter\",\r\n    \"password\":\"Hogwarts123\"\r\n}"
						},
						"url": {
							"raw": "{{host}}/api/profiles/singup",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								"singup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login profile 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response =  pm.response.json();\r",
									"var token = response.token;\r",
									"pm.environment.set(\"token_p1\", token)\r",
									"\r",
									"\r",
									"pm.test(\"Correct status code\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.collectionVariables.get(\"variable_key\");\r",
									"pm.test(\"Correct login response\", function () {\r",
									"      pm.expect(response.message).to.eql(\"Authentication successful\"); \r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\":\"HarryPotter\",\r\n    \"password\":\"Hogwarts123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/profiles/login",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create recipe 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response =  pm.response.json();\r",
									"var recipeId = response.recipeCreated._id;\r",
									"pm.environment.set(\"recipeId1\", recipeId);\r",
									"var currentdate = pm.environment.get('currentdate');\r",
									"var env_timeStamp = pm.environment.get('timeStamp')\r",
									"\r",
									"\r",
									"const potatoObject = response.recipeCreated.items.find(obj => obj.item ===\"potato\");\r",
									"\r",
									"const ketchupObject = response.recipeCreated.items.find(obj => obj.item ===\"ketchup\");\r",
									"\r",
									"\r",
									"pm.test(\"Correct status code\",\r",
									"    function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct recipe response - excluding array of object\", function () {\r",
									"    var response =  pm.response.json();\r",
									"    pm.expect(response.recipeCreated.name).to.eql(\"Recipe1\");\r",
									"    pm.expect(response.recipeCreated.category).to.eql(\"Lunch\");\r",
									"    pm.expect(response.recipeCreated.tag).to.include(\"fast\"); \r",
									"    pm.expect(response.recipeCreated.tag).to.include(\"fast\"); \r",
									"    pm.expect(response.recipeCreated.instruction).to.eql(\"Cooking instruction\");\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Correct image path\", function () {\r",
									" pm.expect(response.recipeCreated.image).to.contain(\"http://localhost:3000/uploads/lilo-stitch-.png-\"); \r",
									"});\r",
									"console.log(\"Responde:\" + response.recipeCreated.image);\r",
									"console.log(\"Postman: \" + \"http://localhost:3000/uploads/lilo-stitch-.png-\"+ env_timeStamp  +\".png\");\r",
									"console.log(\"DateNow: \" + Date.now())\r",
									"\r",
									"\r",
									"pm.test(\"Correct  second items array object response\", function () {\r",
									"\r",
									"    pm.expect(ketchupObject.itemId).to.eql(1);\r",
									"    pm.expect(ketchupObject.item).to.eql(\"ketchup\");\r",
									"    pm.expect(ketchupObject.amount).to.eql(10);\r",
									"    pm.expect(ketchupObject.unit).to.eql(\"ml\");\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Correct  second items array object response\", function () {\r",
									"    pm.expect(potatoObject.itemId).to.eql(2);\r",
									"    pm.expect(potatoObject.item).to.eql(\"potato\");\r",
									"    pm.expect(potatoObject.amount).to.eql(100);\r",
									"    pm.expect(potatoObject.unit).to.eql(\"grams\");\r",
									"});\r",
									"\r",
									" \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var dateNow = Date.now();\r",
									"pm.environment.set(\"timeStamp\", dateNow);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_p1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "multipart/form-data",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Recipe1",
									"type": "text"
								},
								{
									"key": "category",
									"value": "Lunch",
									"type": "text"
								},
								{
									"key": "tag",
									"value": "bad",
									"type": "text"
								},
								{
									"key": "tag",
									"value": "fast",
									"type": "text"
								},
								{
									"key": "instruction",
									"value": "Cooking instruction",
									"type": "text"
								},
								{
									"key": "items[0][itemId]",
									"value": "1",
									"type": "text"
								},
								{
									"key": "items[0][item]",
									"value": "ketchup",
									"type": "text"
								},
								{
									"key": "items[0][amount]",
									"value": "10",
									"type": "text"
								},
								{
									"key": "items[0][unit]",
									"value": "ml",
									"type": "text"
								},
								{
									"key": "items[1][itemId]",
									"value": "2",
									"type": "text"
								},
								{
									"key": "items[1][item]",
									"value": "potato",
									"type": "text"
								},
								{
									"key": "items[1][amount]",
									"value": "100",
									"type": "text"
								},
								{
									"key": "items[1][unit]",
									"value": "grams",
									"type": "text"
								},
								{
									"key": "recipeImage",
									"type": "file",
									"src": "lilo-stitch-.png"
								}
							]
						},
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/recipes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"recipes"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get profile with one recipe",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json(); \r",
									"var recipeId1 = pm.environment.get('recipeId1');\r",
									"var profileID1 = pm.environment.get('profileID_1');\r",
									"\r",
									"\r",
									"pm.test(\"Correct status code\",\r",
									"    function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct user response\", function () {\r",
									"    pm.expect(response.username).to.eql(\"HarryPotter\");\r",
									"    pm.expect(response.userId).to.eql(profileID1);\r",
									"    pm.expect(response.recipes).to.include(recipeId1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_p1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create recipe 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response =  pm.response.json();\r",
									"var recipeId = response.recipeCreated._id;\r",
									"pm.environment.set(\"recipeId2\", recipeId);\r",
									"\r",
									"const obj1 = response.recipeCreated.items.find(obj => obj.item ===\"chili sauce\");\r",
									"\r",
									"const obj2 = response.recipeCreated.items.find(obj => obj.item ===\"sallad\");\r",
									"\r",
									"pm.test(\"Correct status code\",\r",
									"    function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct recipe response - excluding array of object\", function () {\r",
									"    var response =  pm.response.json();\r",
									"    pm.expect(response.recipeCreated.name).to.eql(\"Recipe2\");\r",
									"    pm.expect(response.recipeCreated.category).to.eql(\"Lunch\");\r",
									"    pm.expect(response.recipeCreated.tag[0]).to.eql(\"bad2\"); // both work for identify String in array\r",
									"    pm.expect(response.recipeCreated.tag).to.include(\"fast\"); // both work for identify String in array\r",
									"    pm.expect(response.recipeCreated.instruction).to.eql(\"Cooking instruction2\"); \r",
									"});\r",
									"\r",
									"pm.test(\"Correct image path\", function () {\r",
									"    pm.expect(response.recipeCreated.image).to.contain(\"http://localhost:3000/uploads/dragonball.png-\"); \r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Correct first items array object response\", function () {\r",
									"    console.log(obj1);\r",
									"// testing the array of object response\r",
									"    pm.expect(obj1.itemId).to.eql(1);\r",
									"    pm.expect(obj1.item).to.eql(\"chili sauce\");\r",
									"    pm.expect(obj1.amount).to.eql(5);\r",
									"    pm.expect(obj1.unit).to.eql(\"ml\");\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Correct  second items array object response\", function () {\r",
									"    console.log(obj2);\r",
									"// testing the array of object response\r",
									"    pm.expect(obj2.itemId).to.eql(2);\r",
									"    pm.expect(obj2.item).to.eql(\"sallad\");\r",
									"    pm.expect(obj2.amount).to.eql(200);\r",
									"    pm.expect(obj2.unit).to.eql(\"grams\");\r",
									"});\r",
									"\r",
									" \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_p1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Recipe2",
									"type": "text"
								},
								{
									"key": "recipeImage",
									"type": "file",
									"src": "dragonball.png"
								},
								{
									"key": "category",
									"value": "Lunch",
									"type": "text"
								},
								{
									"key": "tag",
									"value": "bad2",
									"type": "text"
								},
								{
									"key": "tag",
									"value": "fast",
									"type": "text"
								},
								{
									"key": "items[0][itemId]",
									"value": "1",
									"type": "text"
								},
								{
									"key": "items[0][item]",
									"value": "chili sauce",
									"type": "text"
								},
								{
									"key": "items[0][amount]",
									"value": "5",
									"type": "text"
								},
								{
									"key": "items[0][unit]",
									"value": "ml",
									"type": "text"
								},
								{
									"key": "items[1][itemId]",
									"value": "2",
									"type": "text"
								},
								{
									"key": "items[1][item]",
									"value": "sallad",
									"type": "text"
								},
								{
									"key": "items[1][amount]",
									"value": "200",
									"type": "text"
								},
								{
									"key": "items[1][unit]",
									"value": "grams",
									"type": "text"
								},
								{
									"key": "instruction",
									"value": "Cooking instruction2",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/recipes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"recipes"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create recipe 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response =  pm.response.json();\r",
									"var recipeId = response.recipeCreated._id;\r",
									"pm.environment.set(\"recipeId3\", recipeId);\r",
									"\r",
									"const obj1 = response.recipeCreated.items.find(obj => obj.item ===\"potato\");\r",
									"\r",
									"const obj2 = response.recipeCreated.items.find(obj => obj.item ===\"milk\");\r",
									"\r",
									"pm.test(\"Correct status code\",\r",
									"    function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct recipe response - excluding array of object\", function () {\r",
									"   \r",
									"    pm.expect(response.recipeCreated.name).to.eql(\"Recipe3Image\");\r",
									"    pm.expect(response.recipeCreated.category).to.eql(\"Dinner\");\r",
									"    pm.expect(response.recipeCreated.tag[0]).to.eql(\"low carb\"); // both work for identify String in array\r",
									"    pm.expect(response.recipeCreated.tag).to.include(\"fast\"); // both work for identify String in array\r",
									"    pm.expect(response.recipeCreated.instruction).to.eql(\"Cooking instruction3\"); \r",
									"});\r",
									"\r",
									"pm.test(\"Correct image path\", function () {\r",
									"  pm.expect(response.recipeCreated.image).to.contain(\"http://localhost:3000/uploads/lilo-stitch-.png-\");  \r",
									"});\r",
									"\r",
									"pm.test(\"Correct first items array object response\", function () {\r",
									"\r",
									"    pm.expect(obj1.itemId).to.eql(1);\r",
									"    pm.expect(obj1.item).to.eql(\"potato\");\r",
									"    pm.expect(obj1.amount).to.eql(200);\r",
									"    pm.expect(obj1.unit).to.eql(\"grams\");\r",
									"});\r",
									"\r",
									"pm.test(\"Correct  second items array object response\", function () {\r",
									"    pm.expect(obj2.itemId).to.eql(2);\r",
									"    pm.expect(obj2.item).to.eql(\"milk\");\r",
									"    pm.expect(obj2.amount).to.eql(1);\r",
									"    pm.expect(obj2.unit).to.eql(\"l\");\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_p1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "multipart/form-data",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Recipe3Image",
									"type": "text"
								},
								{
									"key": "recipeImage",
									"type": "file",
									"src": "lilo-stitch-.png"
								},
								{
									"key": "tag",
									"value": "low carb",
									"type": "text"
								},
								{
									"key": "tag",
									"value": "fast",
									"type": "text"
								},
								{
									"key": "items[0][itemId]",
									"value": "1",
									"type": "text"
								},
								{
									"key": "items[0][item]",
									"value": "potato",
									"type": "text"
								},
								{
									"key": "items[0][amount]",
									"value": "200",
									"type": "text"
								},
								{
									"key": "items[0][unit]",
									"value": "grams",
									"type": "text"
								},
								{
									"key": "items[1][itemId]",
									"value": "2",
									"type": "text"
								},
								{
									"key": "items[1][item]",
									"value": "milk",
									"type": "text"
								},
								{
									"key": "items[1][amount]",
									"value": "1",
									"type": "text"
								},
								{
									"key": "items[1][unit]",
									"value": "l",
									"type": "text"
								},
								{
									"key": "instruction",
									"value": "Cooking instruction3",
									"type": "text"
								},
								{
									"key": "category",
									"value": "Dinner",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/recipes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"recipes"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "NoImage recipe 4- no image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response =  pm.response.json();\r",
									"var recipeId = response.recipeCreated._id;\r",
									"pm.environment.set(\"recipeId4\", recipeId);\r",
									"\r",
									"const obj1 = response.recipeCreated.items.find(obj => obj.item ===\"chili sauce\");\r",
									"\r",
									"const obj2 = response.recipeCreated.items.find(obj => obj.item ===\"sallad\");\r",
									"\r",
									"pm.test(\"Correct status code\",\r",
									"    function(){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct recipe response - excluding array of object\", function () {\r",
									"    var response =  pm.response.json();\r",
									"    pm.expect(response.recipeCreated.name).to.eql(\"Recipe4\");\r",
									"    pm.expect(response.recipeCreated.category).to.eql(\"Snack\");\r",
									"    pm.expect(response.recipeCreated.tag[0]).to.eql(\"bad2\"); // both work for identify String in array\r",
									"    pm.expect(response.recipeCreated.tag).to.include(\"carbs\"); // both work for identify String in array\r",
									"    pm.expect(response.recipeCreated.instruction).to.eql(\"Cooking instruction4\"); \r",
									"});\r",
									"\r",
									"pm.test(\"Correct image path\", function () {\r",
									"    pm.expect(response.recipeCreated.image).to.contain(\"http://localhost:3000/uploads/defaultRecipeImage.png-\"); \r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Correct first items array object response\", function () {\r",
									"    console.log(obj1);\r",
									"// testing the array of object response\r",
									"    pm.expect(obj1.itemId).to.eql(1);\r",
									"    pm.expect(obj1.item).to.eql(\"chili sauce\");\r",
									"    pm.expect(obj1.amount).to.eql(5);\r",
									"    pm.expect(obj1.unit).to.eql(\"ml\");\r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Correct  second items array object response\", function () {\r",
									"    console.log(obj2);\r",
									"// testing the array of object response\r",
									"    pm.expect(obj2.itemId).to.eql(2);\r",
									"    pm.expect(obj2.item).to.eql(\"sallad\");\r",
									"    pm.expect(obj2.amount).to.eql(200);\r",
									"    pm.expect(obj2.unit).to.eql(\"grams\");\r",
									"});\r",
									"\r",
									" \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"name\":\"Recipe4\",\r\n    \"category\": \"Snack\",\r\n    \"picture\":\"\",\r\n    \"tag\":[\"bad2\",\"carbs\"],\r\n    \"instruction\":\"Cooking instruction4\",\r\n    \"items\": [\r\n        {\r\n        \"itemId\": 1,    \r\n        \"item\":\"chili sauce\",\r\n        \"amount\":\"5\",\r\n        \"unit\":\"ml\"\r\n         },{\r\n        \"itemId\": 2,\r\n        \"item\":\"sallad\",\r\n        \"amount\":\"200\",\r\n        \"unit\":\"grams\"\r\n        }\r\n    ]\r\n    \r\n}"
						},
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/recipes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"recipes"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all recipes",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json(); \r",
									"var recipes = response.recipes;\r",
									"\r",
									"pm.test(\"Correct status code\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Number of user = ' + recipes.length, function () {\r",
									"    pm.expect(recipes.length).to.eql(4);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_p1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/recipes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"recipes"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Filter",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json(); \r",
									"var recipes = response.recipes;\r",
									"\r",
									"pm.test(\"Correct status code\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Number of user = ' + recipes.length, function () {\r",
									"    pm.expect(recipes.length).to.eql(4);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_p1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/recipes?category=Lunch",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"recipes"
							],
							"query": [
								{
									"key": "category",
									"value": "Lunch"
								}
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get recipe 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response =  pm.response.json();\r",
									"const potatoObject = response.recipe[0].items.find(obj => obj.item ===\"potato\");\r",
									"console.log(potatoObject);\r",
									"const ketchupObject = response.recipe[0].items.find(obj => obj.item ===\"ketchup\");\r",
									"\r",
									"\r",
									"pm.test(\"Correct status code\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct recipe response - excluding array of object\", function () {\r",
									"    var response =  pm.response.json();\r",
									"    pm.expect(response.recipe[0].name).to.eql(\"Recipe1\");\r",
									"    pm.expect(response.recipe[0].category).to.eql(\"Lunch\");\r",
									"    pm.expect(response.recipe[0].tag[0]).to.eql(\"bad\"); // both work for identify String in array\r",
									"    pm.expect(response.recipe[0].tag).to.include(\"fast\"); // both work for identify String in array\r",
									"    pm.expect(response.recipe[0].instruction).to.eql(\"Cooking instruction\"); \r",
									"    pm.expect(response.recipe[0].image).to.contain(\"http://localhost:3000/uploads/lilo-stitch-.png-\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Correct  second items array object response\", function () {\r",
									"// testing the array of object response\r",
									"    pm.expect(ketchupObject.item).to.eql(\"ketchup\");\r",
									"    pm.expect(ketchupObject.amount).to.eql(10);\r",
									"    pm.expect(ketchupObject.unit).to.eql(\"ml\");\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Correct  second items array object response\", function () {\r",
									"\r",
									"    pm.expect(potatoObject.item).to.eql(\"potato\");\r",
									"    pm.expect(potatoObject.amount).to.eql(100);\r",
									"    pm.expect(potatoObject.unit).to.eql(\"grams\");\r",
									"});\r",
									"\r",
									" \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_p1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/recipes/:recipeId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"recipes",
								":recipeId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								},
								{
									"key": "recipeId",
									"value": "{{recipeId1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "change name and update item amount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var response =  pm.response.json();\r",
									"const potatoObject = response.updatedRecipe.items.find(obj => obj.item ===\"potato\");\r",
									"\r",
									"const ketchupObject = response.updatedRecipe.items.find(obj => obj.item ===\"ketchup\");\r",
									"\r",
									"\r",
									"pm.test(\"Correct status code\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct updated attributes\", function () {\r",
									"    var response =  pm.response.json();\r",
									"    pm.expect(response.updatedRecipe.name).to.eql(\"Recipe1Updated\");   // UPDATED THE NAME\r",
									"    pm.expect(potatoObject.amount).to.eql(200);  // UPDATED FROM 100 to 200\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Correct not updated attributes\", function () {\r",
									"    var response =  pm.response.json();\r",
									"    pm.expect(response.updatedRecipe.name).to.eql(\"Recipe1Updated\");   // UPDATED THE NAME\r",
									"    pm.expect(response.updatedRecipe.category).to.eql(\"Lunch\");\r",
									"    pm.expect(response.updatedRecipe.tag).to.include(\"bad\"); \r",
									"    pm.expect(response.updatedRecipe.tag).to.include(\"fast\"); //\r",
									"    pm.expect(response.updatedRecipe.instruction).to.eql(\"Cooking instruction\");\r",
									"    pm.expect(response.updatedRecipe.image).to.contain(\"http://localhost:3000/uploads/lilo-stitch-.png-\");  \r",
									"\r",
									"    pm.expect(ketchupObject.item).to.eql(\"ketchup\");\r",
									"    pm.expect(ketchupObject.amount).to.eql(5);\r",
									"    pm.expect(ketchupObject.unit).to.eql(\"ml\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_p1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "multipart/form-data",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"name\":\"Recipe1Updated\",\r\n    \"items\": [\r\n        {  \r\n        \"itemId\": 1,    \r\n        \"item\":\"ketchup\",\r\n        \"amount\":\"5\",\r\n        \"unit\":\"ml\"\r\n         },{\r\n        \"itemId\": 2,\r\n        \"item\":\"potato\",\r\n        \"amount\":\"200\",\r\n        \"unit\":\"grams\"\r\n        }\r\n    ]\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/recipes/:recipeId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"recipes",
								":recipeId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								},
								{
									"key": "recipeId",
									"value": "{{recipeId1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get uppdated recipe 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response =  pm.response.json();\r",
									"const potatoObject = response.recipe[0].items.find(obj => obj.item ===\"potato\");\r",
									"\r",
									"const ketchupObject = response.recipe[0].items.find(obj => obj.item ===\"ketchup\");\r",
									"\r",
									"\r",
									"pm.test(\"Correct status code\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct updated recipe response\", function () {\r",
									"    var response =  pm.response.json();\r",
									"    pm.expect(response.recipe[0].name).to.eql(\"Recipe1Updated\");   // UPDATED THE NAME\r",
									"    pm.expect(potatoObject.amount).to.eql(200);  // UPDATED FROM 100 to 200\r",
									"    pm.expect(response.recipe[0].name).to.eql(\"Recipe1Updated\");   // UPDATED THE NAME\r",
									"    pm.expect(response.recipe[0].category).to.eql(\"Lunch\");\r",
									"    pm.expect(response.recipe[0].tag[0]).to.eql(\"bad\"); // both work for identify String in array\r",
									"    pm.expect(response.recipe[0].tag).to.include(\"fast\"); // both work for identify String in array\r",
									"    pm.expect(response.recipe[0].instruction).to.eql(\"Cooking instruction\"); \r",
									"     pm.expect(response.recipe[0].image).to.contain(\"http://localhost:3000/uploads/lilo-stitch-.png-\"); \r",
									"    pm.expect(ketchupObject.item).to.eql(\"ketchup\");\r",
									"    pm.expect(ketchupObject.amount).to.eql(5);\r",
									"    pm.expect(ketchupObject.unit).to.eql(\"ml\");\r",
									"});\r",
									"\r",
									" \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_p1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/recipes/:recipeId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"recipes",
								":recipeId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								},
								{
									"key": "recipeId",
									"value": "{{recipeId1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "remove recipe item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response =  pm.response.json();\r",
									"\r",
									"const potatoObject = response.updatedRecipe.items.find(obj => obj.item ===\"potato\");\r",
									"\r",
									"\r",
									"pm.test(\"Correct status code\",\r",
									"    function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct  item list\", function () {\r",
									"    console.log(potatoObject);\r",
									"// testing the array of object response\r",
									"    pm.expect(potatoObject.itemId).to.eql(1);\r",
									"    pm.expect(potatoObject.item).to.eql(\"potato\");\r",
									"    pm.expect(potatoObject.amount).to.eql(200);\r",
									"    pm.expect(potatoObject.unit).to.eql(\"grams\");\r",
									"});\r",
									"\r",
									"pm.test(\"Correct recipe responde for the non updated attributes\", function () {\r",
									"    pm.expect(response.updatedRecipe.name).to.eql(\"Recipe1Updated\");\r",
									"    pm.expect(response.updatedRecipe.category).to.eql(\"Lunch\");\r",
									"    pm.expect(response.updatedRecipe.tag).to.include(\"fast\"); \r",
									"    pm.expect(response.updatedRecipe.tag).to.include(\"fast\"); \r",
									"    pm.expect(response.updatedRecipe.instruction).to.eql(\"Cooking instruction\"); \r",
									"    pm.expect(response.updatedRecipe.image).to.contain(\"http://localhost:3000/uploads/lilo-stitch-.png-\"); \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_p1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "multipart/form-data",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{   \r\n    \"items\": [\r\n      {\r\n        \"itemId\": 1,\r\n        \"item\":\"potato\",\r\n        \"amount\":\"200\",\r\n        \"unit\":\"grams\"\r\n        }\r\n    ]\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/recipes/:recipeId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"recipes",
								":recipeId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								},
								{
									"key": "recipeId",
									"value": "{{recipeId1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get updated item list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response =  pm.response.json();\r",
									"\r",
									"const potatoObject = response.recipe[0].items.find(obj => obj.item ===\"potato\");\r",
									"\r",
									"\r",
									"pm.test(\"Correct status code\",\r",
									"    function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct  item list\", function () {\r",
									"\r",
									"// testing the array of object response\r",
									"    pm.expect(potatoObject.itemId).to.eql(1);\r",
									"    pm.expect(potatoObject.item).to.eql(\"potato\");\r",
									"    pm.expect(potatoObject.amount).to.eql(200);\r",
									"    pm.expect(potatoObject.unit).to.eql(\"grams\");\r",
									"\r",
									"    pm.expect(response.recipe[0].name).to.eql(\"Recipe1Updated\");\r",
									"    pm.expect(response.recipe[0].category).to.eql(\"Lunch\");\r",
									"    pm.expect(response.recipe[0].tag).to.include(\"fast\"); \r",
									"    pm.expect(response.recipe[0].tag).to.include(\"fast\"); \r",
									"    pm.expect(response.recipe[0].instruction).to.eql(\"Cooking instruction\"); \r",
									"    pm.expect(response.recipe[0].image).to.contain(\"http://localhost:3000/uploads/lilo-stitch-.png-\"); \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_p1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/recipes/:recipeId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"recipes",
								":recipeId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								},
								{
									"key": "recipeId",
									"value": "{{recipeId1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "update picture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response =  pm.response.json();\r",
									"\r",
									"const potatoObject = response.updatedRecipe.items.find(obj => obj.item ===\"potato\");\r",
									"\r",
									"\r",
									"pm.test(\"Correct status code\",\r",
									"    function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct  item list\", function () {\r",
									"\r",
									"    pm.expect(potatoObject.itemId).to.eql(1);\r",
									"    pm.expect(potatoObject.item).to.eql(\"potato\");\r",
									"    pm.expect(potatoObject.amount).to.eql(200);\r",
									"    pm.expect(potatoObject.unit).to.eql(\"grams\");\r",
									"});\r",
									"pm.test(\"Correct updated image path\", function () {\r",
									"    pm.expect(response.updatedRecipe.image).to.contain(\"http://localhost:3000/uploads/dragonball.png-\"); \r",
									"});\r",
									"\r",
									"pm.test(\"Correct recipe responde for the non updated attributes\", function () {\r",
									"    pm.expect(response.updatedRecipe.name).to.eql(\"Recipe1Updated\");\r",
									"    pm.expect(response.updatedRecipe.category).to.eql(\"Lunch\");\r",
									"    pm.expect(response.updatedRecipe.tag).to.include(\"fast\"); \r",
									"    pm.expect(response.updatedRecipe.tag).to.include(\"fast\"); \r",
									"    pm.expect(response.updatedRecipe.instruction).to.eql(\"Cooking instruction\"); \r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_p1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "multipart/form-data",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "recipeImage",
									"type": "file",
									"src": "dragonball.png"
								}
							]
						},
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/recipes/:recipeId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"recipes",
								":recipeId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								},
								{
									"key": "recipeId",
									"value": "{{recipeId1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get updated picture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response =  pm.response.json();\r",
									"\r",
									"const potatoObject = response.recipe[0].items.find(obj => obj.item ===\"potato\");\r",
									"\r",
									"\r",
									"pm.test(\"Correct status code\",\r",
									"    function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct updated image path\", function () {\r",
									"      pm.expect(response.recipe[0].image).to.contain(\"http://localhost:3000/uploads/dragonball.png-\");  \r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Correct  item list\", function () {\r",
									"\r",
									"// testing the array of object response\r",
									"    pm.expect(potatoObject.itemId).to.eql(1);\r",
									"    pm.expect(potatoObject.item).to.eql(\"potato\");\r",
									"    pm.expect(potatoObject.amount).to.eql(200);\r",
									"    pm.expect(potatoObject.unit).to.eql(\"grams\");\r",
									"\r",
									"    pm.expect(response.recipe[0].name).to.eql(\"Recipe1Updated\");\r",
									"    pm.expect(response.recipe[0].category).to.eql(\"Lunch\");\r",
									"    pm.expect(response.recipe[0].tag).to.include(\"fast\"); \r",
									"    pm.expect(response.recipe[0].tag).to.include(\"fast\"); \r",
									"    pm.expect(response.recipe[0].instruction).to.eql(\"Cooking instruction\"); \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_p1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/recipes/:recipeId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"recipes",
								":recipeId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								},
								{
									"key": "recipeId",
									"value": "{{recipeId1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect-User not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct status code\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error response\", function () {\r",
									"    var jsonData = pm.response.json(); // parse to json\r",
									"    pm.expect(jsonData.message).to.eql(\"User not found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_p1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/recipes/:recipeId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"recipes",
								":recipeId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "6328bab1c3ca1162dcb1342e"
								},
								{
									"key": "recipeId",
									"value": "{{recipeId1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete recipe 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct status code\", function(){\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error response\", function () {\r",
									"    var jsonData = pm.response.json(); // parse to json\r",
									"    pm.expect(jsonData.message).to.eql('The recipe has been deleted');\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_p1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/recipes/:recipeId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"recipes",
								":recipeId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								},
								{
									"key": "recipeId",
									"value": "{{recipeId1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete recipe 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct status code\", function(){\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error response\", function () {\r",
									"    var jsonData = pm.response.json(); // parse to json\r",
									"    pm.expect(jsonData.message).to.eql('The recipe has been deleted');\r",
									"   \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_p1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/recipes/:recipeId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"recipes",
								":recipeId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								},
								{
									"key": "recipeId",
									"value": "{{recipeId2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete recipe 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct status code\", function(){\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error response\", function () {\r",
									"    var jsonData = pm.response.json(); // parse to json\r",
									"    pm.expect(jsonData.message).to.eql('The recipe has been deleted');\r",
									"    pm.expect(jsonData.deletedImage).to.eql('Image has been deleted.');\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_p1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/recipes/:recipeId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"recipes",
								":recipeId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								},
								{
									"key": "recipeId",
									"value": "{{recipeId3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete recipe 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct status code\", function(){\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error response\", function () {\r",
									"    var jsonData = pm.response.json(); // parse to json\r",
									"    pm.expect(jsonData.message).to.eql('The recipe has been deleted');\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_p1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/recipes/:recipeId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"recipes",
								":recipeId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								},
								{
									"key": "recipeId",
									"value": "{{recipeId4}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect - Recipe not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct status code\", function(){\r",
									"  pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error response\", function () {\r",
									"    var jsonData = pm.response.json(); // parse to json\r",
									"    pm.expect(jsonData.message).to.eql(\"Recipe not found\");\r",
									" \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_p1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/recipes/:recipeId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"recipes",
								":recipeId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								},
								{
									"key": "recipeId",
									"value": "{{recipeId1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect Get all error message",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct status code\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error response\", function () {\r",
									"    var jsonData = pm.response.json(); // parse to json\r",
									"    pm.expect(jsonData.message).to.eql(\"Recipe not found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_p1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/recipes",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"recipes"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Expect Get spec error message Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct status code\", function(){\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct error response\", function () {\r",
									"    var jsonData = pm.response.json(); // parse to json\r",
									"    pm.expect(jsonData.message).to.eql(\"Recipe not found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_p1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId/recipes/:recipeId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId",
								"recipes",
								":recipeId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								},
								{
									"key": "recipeId",
									"value": "6328bb84c3ca1162dcb1343d"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete profile 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Correct status code\", function(){\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct user message\"), function(){\r",
									"      var jsonData = pm.response.json(); // parse to json\r",
									"    pm.expect(jsonData.message).to.eql(\"The profile has been deleted\");\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_p1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/api/profiles/:profileId",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "{{profileID_1}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "http://localhost:3000",
			"type": "string"
		}
	]
}